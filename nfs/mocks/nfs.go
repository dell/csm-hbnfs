// Code generated by MockGen. DO NOT EDIT.
// Source: proto/nfs_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/nfs.go -package=mocks -source=proto/nfs_grpc.pb.go NfsServer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	proto "github.com/dell/csm-hbnfs/nfs/proto"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockNfsClient is a mock of NfsClient interface.
type MockNfsClient struct {
	ctrl     *gomock.Controller
	recorder *MockNfsClientMockRecorder
	isgomock struct{}
}

// MockNfsClientMockRecorder is the mock recorder for MockNfsClient.
type MockNfsClientMockRecorder struct {
	mock *MockNfsClient
}

// NewMockNfsClient creates a new mock instance.
func NewMockNfsClient(ctrl *gomock.Controller) *MockNfsClient {
	mock := &MockNfsClient{ctrl: ctrl}
	mock.recorder = &MockNfsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNfsClient) EXPECT() *MockNfsClientMockRecorder {
	return m.recorder
}

// ExportMultipleNfsVolumes mocks base method.
func (m *MockNfsClient) ExportMultipleNfsVolumes(ctx context.Context, in *proto.ExportMultipleNfsVolumesRequest, opts ...grpc.CallOption) (*proto.ExportMultipleNfsVolumesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportMultipleNfsVolumes", varargs...)
	ret0, _ := ret[0].(*proto.ExportMultipleNfsVolumesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportMultipleNfsVolumes indicates an expected call of ExportMultipleNfsVolumes.
func (mr *MockNfsClientMockRecorder) ExportMultipleNfsVolumes(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportMultipleNfsVolumes", reflect.TypeOf((*MockNfsClient)(nil).ExportMultipleNfsVolumes), varargs...)
}

// ExportNfsVolume mocks base method.
func (m *MockNfsClient) ExportNfsVolume(ctx context.Context, in *proto.ExportNfsVolumeRequest, opts ...grpc.CallOption) (*proto.ExportNfsVolumeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportNfsVolume", varargs...)
	ret0, _ := ret[0].(*proto.ExportNfsVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportNfsVolume indicates an expected call of ExportNfsVolume.
func (mr *MockNfsClientMockRecorder) ExportNfsVolume(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportNfsVolume", reflect.TypeOf((*MockNfsClient)(nil).ExportNfsVolume), varargs...)
}

// GetExports mocks base method.
func (m *MockNfsClient) GetExports(ctx context.Context, in *proto.GetExportsRequest, opts ...grpc.CallOption) (*proto.GetExportsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExports", varargs...)
	ret0, _ := ret[0].(*proto.GetExportsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExports indicates an expected call of GetExports.
func (mr *MockNfsClientMockRecorder) GetExports(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExports", reflect.TypeOf((*MockNfsClient)(nil).GetExports), varargs...)
}

// Ping mocks base method.
func (m *MockNfsClient) Ping(ctx context.Context, in *proto.PingRequest, opts ...grpc.CallOption) (*proto.PingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*proto.PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockNfsClientMockRecorder) Ping(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockNfsClient)(nil).Ping), varargs...)
}

// UnexportMultipleNfsVolumes mocks base method.
func (m *MockNfsClient) UnexportMultipleNfsVolumes(ctx context.Context, in *proto.UnexportMultipleNfsVolumesRequest, opts ...grpc.CallOption) (*proto.UnexportMultipleNfsVolumesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnexportMultipleNfsVolumes", varargs...)
	ret0, _ := ret[0].(*proto.UnexportMultipleNfsVolumesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnexportMultipleNfsVolumes indicates an expected call of UnexportMultipleNfsVolumes.
func (mr *MockNfsClientMockRecorder) UnexportMultipleNfsVolumes(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnexportMultipleNfsVolumes", reflect.TypeOf((*MockNfsClient)(nil).UnexportMultipleNfsVolumes), varargs...)
}

// UnexportNfsVolume mocks base method.
func (m *MockNfsClient) UnexportNfsVolume(ctx context.Context, in *proto.UnexportNfsVolumeRequest, opts ...grpc.CallOption) (*proto.UnexportNfsVolumeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnexportNfsVolume", varargs...)
	ret0, _ := ret[0].(*proto.UnexportNfsVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnexportNfsVolume indicates an expected call of UnexportNfsVolume.
func (mr *MockNfsClientMockRecorder) UnexportNfsVolume(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnexportNfsVolume", reflect.TypeOf((*MockNfsClient)(nil).UnexportNfsVolume), varargs...)
}

// MockNfsServer is a mock of NfsServer interface.
type MockNfsServer struct {
	proto.UnimplementedNfsServer // Added after generation to avoid proto error.

	ctrl     *gomock.Controller
	recorder *MockNfsServerMockRecorder
	isgomock struct{}
}

// MockNfsServerMockRecorder is the mock recorder for MockNfsServer.
type MockNfsServerMockRecorder struct {
	mock *MockNfsServer
}

// NewMockNfsServer creates a new mock instance.
func NewMockNfsServer(ctrl *gomock.Controller) *MockNfsServer {
	mock := &MockNfsServer{ctrl: ctrl}
	mock.recorder = &MockNfsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNfsServer) EXPECT() *MockNfsServerMockRecorder {
	return m.recorder
}

// ExportMultipleNfsVolumes mocks base method.
func (m *MockNfsServer) ExportMultipleNfsVolumes(arg0 context.Context, arg1 *proto.ExportMultipleNfsVolumesRequest) (*proto.ExportMultipleNfsVolumesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportMultipleNfsVolumes", arg0, arg1)
	ret0, _ := ret[0].(*proto.ExportMultipleNfsVolumesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportMultipleNfsVolumes indicates an expected call of ExportMultipleNfsVolumes.
func (mr *MockNfsServerMockRecorder) ExportMultipleNfsVolumes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportMultipleNfsVolumes", reflect.TypeOf((*MockNfsServer)(nil).ExportMultipleNfsVolumes), arg0, arg1)
}

// ExportNfsVolume mocks base method.
func (m *MockNfsServer) ExportNfsVolume(arg0 context.Context, arg1 *proto.ExportNfsVolumeRequest) (*proto.ExportNfsVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportNfsVolume", arg0, arg1)
	ret0, _ := ret[0].(*proto.ExportNfsVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportNfsVolume indicates an expected call of ExportNfsVolume.
func (mr *MockNfsServerMockRecorder) ExportNfsVolume(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportNfsVolume", reflect.TypeOf((*MockNfsServer)(nil).ExportNfsVolume), arg0, arg1)
}

// GetExports mocks base method.
func (m *MockNfsServer) GetExports(arg0 context.Context, arg1 *proto.GetExportsRequest) (*proto.GetExportsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExports", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetExportsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExports indicates an expected call of GetExports.
func (mr *MockNfsServerMockRecorder) GetExports(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExports", reflect.TypeOf((*MockNfsServer)(nil).GetExports), arg0, arg1)
}

// Ping mocks base method.
func (m *MockNfsServer) Ping(arg0 context.Context, arg1 *proto.PingRequest) (*proto.PingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*proto.PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockNfsServerMockRecorder) Ping(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockNfsServer)(nil).Ping), arg0, arg1)
}

// UnexportMultipleNfsVolumes mocks base method.
func (m *MockNfsServer) UnexportMultipleNfsVolumes(arg0 context.Context, arg1 *proto.UnexportMultipleNfsVolumesRequest) (*proto.UnexportMultipleNfsVolumesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnexportMultipleNfsVolumes", arg0, arg1)
	ret0, _ := ret[0].(*proto.UnexportMultipleNfsVolumesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnexportMultipleNfsVolumes indicates an expected call of UnexportMultipleNfsVolumes.
func (mr *MockNfsServerMockRecorder) UnexportMultipleNfsVolumes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnexportMultipleNfsVolumes", reflect.TypeOf((*MockNfsServer)(nil).UnexportMultipleNfsVolumes), arg0, arg1)
}

// UnexportNfsVolume mocks base method.
func (m *MockNfsServer) UnexportNfsVolume(arg0 context.Context, arg1 *proto.UnexportNfsVolumeRequest) (*proto.UnexportNfsVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnexportNfsVolume", arg0, arg1)
	ret0, _ := ret[0].(*proto.UnexportNfsVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnexportNfsVolume indicates an expected call of UnexportNfsVolume.
func (mr *MockNfsServerMockRecorder) UnexportNfsVolume(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnexportNfsVolume", reflect.TypeOf((*MockNfsServer)(nil).UnexportNfsVolume), arg0, arg1)
}

// mustEmbedUnimplementedNfsServer mocks base method.
func (m *MockNfsServer) mustEmbedUnimplementedNfsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedNfsServer")
}

// mustEmbedUnimplementedNfsServer indicates an expected call of mustEmbedUnimplementedNfsServer.
func (mr *MockNfsServerMockRecorder) mustEmbedUnimplementedNfsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedNfsServer", reflect.TypeOf((*MockNfsServer)(nil).mustEmbedUnimplementedNfsServer))
}

// MockUnsafeNfsServer is a mock of UnsafeNfsServer interface.
type MockUnsafeNfsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeNfsServerMockRecorder
	isgomock struct{}
}

// MockUnsafeNfsServerMockRecorder is the mock recorder for MockUnsafeNfsServer.
type MockUnsafeNfsServerMockRecorder struct {
	mock *MockUnsafeNfsServer
}

// NewMockUnsafeNfsServer creates a new mock instance.
func NewMockUnsafeNfsServer(ctrl *gomock.Controller) *MockUnsafeNfsServer {
	mock := &MockUnsafeNfsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeNfsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeNfsServer) EXPECT() *MockUnsafeNfsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedNfsServer mocks base method.
func (m *MockUnsafeNfsServer) mustEmbedUnimplementedNfsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedNfsServer")
}

// mustEmbedUnimplementedNfsServer indicates an expected call of mustEmbedUnimplementedNfsServer.
func (mr *MockUnsafeNfsServerMockRecorder) mustEmbedUnimplementedNfsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedNfsServer", reflect.TypeOf((*MockUnsafeNfsServer)(nil).mustEmbedUnimplementedNfsServer))
}
