// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: nfs.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExportNfsVolumeRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	VolumeId         string                 `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	ExportNfsContext map[string]string      `protobuf:"bytes,2,rep,name=export_nfs_context,json=exportNfsContext,proto3" json:"export_nfs_context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ExportNfsVolumeRequest) Reset() {
	*x = ExportNfsVolumeRequest{}
	mi := &file_nfs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportNfsVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportNfsVolumeRequest) ProtoMessage() {}

func (x *ExportNfsVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nfs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportNfsVolumeRequest.ProtoReflect.Descriptor instead.
func (*ExportNfsVolumeRequest) Descriptor() ([]byte, []int) {
	return file_nfs_proto_rawDescGZIP(), []int{0}
}

func (x *ExportNfsVolumeRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *ExportNfsVolumeRequest) GetExportNfsContext() map[string]string {
	if x != nil {
		return x.ExportNfsContext
	}
	return nil
}

type ExportNfsVolumeResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	VolumeId         string                 `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	ExportNfsContext map[string]string      `protobuf:"bytes,2,rep,name=export_nfs_context,json=exportNfsContext,proto3" json:"export_nfs_context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ExportNfsVolumeResponse) Reset() {
	*x = ExportNfsVolumeResponse{}
	mi := &file_nfs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportNfsVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportNfsVolumeResponse) ProtoMessage() {}

func (x *ExportNfsVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nfs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportNfsVolumeResponse.ProtoReflect.Descriptor instead.
func (*ExportNfsVolumeResponse) Descriptor() ([]byte, []int) {
	return file_nfs_proto_rawDescGZIP(), []int{1}
}

func (x *ExportNfsVolumeResponse) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *ExportNfsVolumeResponse) GetExportNfsContext() map[string]string {
	if x != nil {
		return x.ExportNfsContext
	}
	return nil
}

type UnexportNfsVolumeRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	VolumeId           string                 `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	UnexportNfsContext map[string]string      `protobuf:"bytes,2,rep,name=unexport_nfs_context,json=unexportNfsContext,proto3" json:"unexport_nfs_context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UnexportNfsVolumeRequest) Reset() {
	*x = UnexportNfsVolumeRequest{}
	mi := &file_nfs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnexportNfsVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnexportNfsVolumeRequest) ProtoMessage() {}

func (x *UnexportNfsVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nfs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnexportNfsVolumeRequest.ProtoReflect.Descriptor instead.
func (*UnexportNfsVolumeRequest) Descriptor() ([]byte, []int) {
	return file_nfs_proto_rawDescGZIP(), []int{2}
}

func (x *UnexportNfsVolumeRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *UnexportNfsVolumeRequest) GetUnexportNfsContext() map[string]string {
	if x != nil {
		return x.UnexportNfsContext
	}
	return nil
}

type UnexportNfsVolumeResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	VolumeId           string                 `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	UnexportNfsContext map[string]string      `protobuf:"bytes,2,rep,name=unexport_nfs_context,json=unexportNfsContext,proto3" json:"unexport_nfs_context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UnexportNfsVolumeResponse) Reset() {
	*x = UnexportNfsVolumeResponse{}
	mi := &file_nfs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnexportNfsVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnexportNfsVolumeResponse) ProtoMessage() {}

func (x *UnexportNfsVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nfs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnexportNfsVolumeResponse.ProtoReflect.Descriptor instead.
func (*UnexportNfsVolumeResponse) Descriptor() ([]byte, []int) {
	return file_nfs_proto_rawDescGZIP(), []int{3}
}

func (x *UnexportNfsVolumeResponse) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *UnexportNfsVolumeResponse) GetUnexportNfsContext() map[string]string {
	if x != nil {
		return x.UnexportNfsContext
	}
	return nil
}

type PingRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	NodeIpAddress  string                 `protobuf:"bytes,1,opt,name=node_ip_address,json=nodeIpAddress,proto3" json:"node_ip_address,omitempty"`
	DumpAllExports bool                   `protobuf:"varint,2,opt,name=dumpAllExports,proto3" json:"dumpAllExports,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_nfs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nfs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_nfs_proto_rawDescGZIP(), []int{4}
}

func (x *PingRequest) GetNodeIpAddress() string {
	if x != nil {
		return x.NodeIpAddress
	}
	return ""
}

func (x *PingRequest) GetDumpAllExports() bool {
	if x != nil {
		return x.DumpAllExports
	}
	return false
}

type PingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ready         bool                   `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_nfs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nfs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_nfs_proto_rawDescGZIP(), []int{5}
}

func (x *PingResponse) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *PingResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetExportsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExportsRequest) Reset() {
	*x = GetExportsRequest{}
	mi := &file_nfs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExportsRequest) ProtoMessage() {}

func (x *GetExportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nfs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExportsRequest.ProtoReflect.Descriptor instead.
func (*GetExportsRequest) Descriptor() ([]byte, []int) {
	return file_nfs_proto_rawDescGZIP(), []int{6}
}

type GetExportsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exports       []string               `protobuf:"bytes,1,rep,name=exports,proto3" json:"exports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExportsResponse) Reset() {
	*x = GetExportsResponse{}
	mi := &file_nfs_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExportsResponse) ProtoMessage() {}

func (x *GetExportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nfs_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExportsResponse.ProtoReflect.Descriptor instead.
func (*GetExportsResponse) Descriptor() ([]byte, []int) {
	return file_nfs_proto_rawDescGZIP(), []int{7}
}

func (x *GetExportsResponse) GetExports() []string {
	if x != nil {
		return x.Exports
	}
	return nil
}

type ExportMultipleNfsVolumesRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	VolumeIds        []string               `protobuf:"bytes,1,rep,name=volume_ids,json=volumeIds,proto3" json:"volume_ids,omitempty"`
	ExportNfsContext map[string]string      `protobuf:"bytes,2,rep,name=export_nfs_context,json=exportNfsContext,proto3" json:"export_nfs_context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ExportMultipleNfsVolumesRequest) Reset() {
	*x = ExportMultipleNfsVolumesRequest{}
	mi := &file_nfs_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportMultipleNfsVolumesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportMultipleNfsVolumesRequest) ProtoMessage() {}

func (x *ExportMultipleNfsVolumesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nfs_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportMultipleNfsVolumesRequest.ProtoReflect.Descriptor instead.
func (*ExportMultipleNfsVolumesRequest) Descriptor() ([]byte, []int) {
	return file_nfs_proto_rawDescGZIP(), []int{8}
}

func (x *ExportMultipleNfsVolumesRequest) GetVolumeIds() []string {
	if x != nil {
		return x.VolumeIds
	}
	return nil
}

func (x *ExportMultipleNfsVolumesRequest) GetExportNfsContext() map[string]string {
	if x != nil {
		return x.ExportNfsContext
	}
	return nil
}

type ExportMultipleNfsVolumesResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SuccessfulIds    []string               `protobuf:"bytes,1,rep,name=successful_ids,json=successfulIds,proto3" json:"successful_ids,omitempty"`
	UnsuccessfulIds  []string               `protobuf:"bytes,2,rep,name=unsuccessful_ids,json=unsuccessfulIds,proto3" json:"unsuccessful_ids,omitempty"`
	ExportNfsContext map[string]string      `protobuf:"bytes,3,rep,name=export_nfs_context,json=exportNfsContext,proto3" json:"export_nfs_context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ExportMultipleNfsVolumesResponse) Reset() {
	*x = ExportMultipleNfsVolumesResponse{}
	mi := &file_nfs_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportMultipleNfsVolumesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportMultipleNfsVolumesResponse) ProtoMessage() {}

func (x *ExportMultipleNfsVolumesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nfs_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportMultipleNfsVolumesResponse.ProtoReflect.Descriptor instead.
func (*ExportMultipleNfsVolumesResponse) Descriptor() ([]byte, []int) {
	return file_nfs_proto_rawDescGZIP(), []int{9}
}

func (x *ExportMultipleNfsVolumesResponse) GetSuccessfulIds() []string {
	if x != nil {
		return x.SuccessfulIds
	}
	return nil
}

func (x *ExportMultipleNfsVolumesResponse) GetUnsuccessfulIds() []string {
	if x != nil {
		return x.UnsuccessfulIds
	}
	return nil
}

func (x *ExportMultipleNfsVolumesResponse) GetExportNfsContext() map[string]string {
	if x != nil {
		return x.ExportNfsContext
	}
	return nil
}

type UnexportMultipleNfsVolumesRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	VolumeIds        []string               `protobuf:"bytes,1,rep,name=volume_ids,json=volumeIds,proto3" json:"volume_ids,omitempty"`
	ExportNfsContext map[string]string      `protobuf:"bytes,2,rep,name=export_nfs_context,json=exportNfsContext,proto3" json:"export_nfs_context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UnexportMultipleNfsVolumesRequest) Reset() {
	*x = UnexportMultipleNfsVolumesRequest{}
	mi := &file_nfs_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnexportMultipleNfsVolumesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnexportMultipleNfsVolumesRequest) ProtoMessage() {}

func (x *UnexportMultipleNfsVolumesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nfs_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnexportMultipleNfsVolumesRequest.ProtoReflect.Descriptor instead.
func (*UnexportMultipleNfsVolumesRequest) Descriptor() ([]byte, []int) {
	return file_nfs_proto_rawDescGZIP(), []int{10}
}

func (x *UnexportMultipleNfsVolumesRequest) GetVolumeIds() []string {
	if x != nil {
		return x.VolumeIds
	}
	return nil
}

func (x *UnexportMultipleNfsVolumesRequest) GetExportNfsContext() map[string]string {
	if x != nil {
		return x.ExportNfsContext
	}
	return nil
}

type UnexportMultipleNfsVolumesResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SuccessfulIds    []string               `protobuf:"bytes,1,rep,name=successful_ids,json=successfulIds,proto3" json:"successful_ids,omitempty"`
	UnsuccessfulIds  []string               `protobuf:"bytes,2,rep,name=unsuccessful_ids,json=unsuccessfulIds,proto3" json:"unsuccessful_ids,omitempty"`
	ExportNfsContext map[string]string      `protobuf:"bytes,3,rep,name=export_nfs_context,json=exportNfsContext,proto3" json:"export_nfs_context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UnexportMultipleNfsVolumesResponse) Reset() {
	*x = UnexportMultipleNfsVolumesResponse{}
	mi := &file_nfs_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnexportMultipleNfsVolumesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnexportMultipleNfsVolumesResponse) ProtoMessage() {}

func (x *UnexportMultipleNfsVolumesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nfs_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnexportMultipleNfsVolumesResponse.ProtoReflect.Descriptor instead.
func (*UnexportMultipleNfsVolumesResponse) Descriptor() ([]byte, []int) {
	return file_nfs_proto_rawDescGZIP(), []int{11}
}

func (x *UnexportMultipleNfsVolumesResponse) GetSuccessfulIds() []string {
	if x != nil {
		return x.SuccessfulIds
	}
	return nil
}

func (x *UnexportMultipleNfsVolumesResponse) GetUnsuccessfulIds() []string {
	if x != nil {
		return x.UnsuccessfulIds
	}
	return nil
}

func (x *UnexportMultipleNfsVolumesResponse) GetExportNfsContext() map[string]string {
	if x != nil {
		return x.ExportNfsContext
	}
	return nil
}

var File_nfs_proto protoreflect.FileDescriptor

var file_nfs_proto_rawDesc = string([]byte{
	0x0a, 0x09, 0x6e, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6e, 0x66, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x22, 0xe4, 0x01, 0x0a, 0x16, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x68, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x66, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x6e, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x43, 0x0a, 0x15, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe6, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x12, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x66, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x1a, 0x43, 0x0a, 0x15, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf0, 0x01, 0x0a, 0x18, 0x55, 0x6e,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x70, 0x0a, 0x14, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x66, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x12, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x45, 0x0a, 0x17, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf2, 0x01, 0x0a,
	0x19, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x71, 0x0a, 0x14, 0x75, 0x6e, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x66, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55,
	0x6e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x45, 0x0a, 0x17, 0x55, 0x6e,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x5d, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x75, 0x6d, 0x70,
	0x41, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x64, 0x75, 0x6d, 0x70, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x22, 0x3c, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x13,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x22, 0xf8, 0x01, 0x0a, 0x1f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x12, 0x71, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6e, 0x66, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x66, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x43, 0x0a, 0x15, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xad,
	0x02, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x6e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x72, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x66, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x44, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4e,
	0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x66, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x43, 0x0a, 0x15, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfc,
	0x01, 0x0a, 0x21, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x73, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x66,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x6e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4e,
	0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x43, 0x0a, 0x15, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb1, 0x02,
	0x0a, 0x22, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x75,
	0x6e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x6e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x74, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6e, 0x66, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x43, 0x0a, 0x15,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x32, 0xe4, 0x04, 0x0a, 0x03, 0x4e, 0x66, 0x73, 0x12, 0x60, 0x0a, 0x0f, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x2e, 0x6e,
	0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x55,
	0x6e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x26, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x6e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x2e, 0x6e, 0x66,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x1f, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x18, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x1a, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x4e, 0x66, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x6c, 0x2f, 0x63, 0x73, 0x6d, 0x2d,
	0x68, 0x62, 0x6e, 0x66, 0x73, 0x2f, 0x6e, 0x66, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_nfs_proto_rawDescOnce sync.Once
	file_nfs_proto_rawDescData []byte
)

func file_nfs_proto_rawDescGZIP() []byte {
	file_nfs_proto_rawDescOnce.Do(func() {
		file_nfs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nfs_proto_rawDesc), len(file_nfs_proto_rawDesc)))
	})
	return file_nfs_proto_rawDescData
}

var file_nfs_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_nfs_proto_goTypes = []any{
	(*ExportNfsVolumeRequest)(nil),             // 0: nfs.proto.v1.ExportNfsVolumeRequest
	(*ExportNfsVolumeResponse)(nil),            // 1: nfs.proto.v1.ExportNfsVolumeResponse
	(*UnexportNfsVolumeRequest)(nil),           // 2: nfs.proto.v1.UnexportNfsVolumeRequest
	(*UnexportNfsVolumeResponse)(nil),          // 3: nfs.proto.v1.UnexportNfsVolumeResponse
	(*PingRequest)(nil),                        // 4: nfs.proto.v1.PingRequest
	(*PingResponse)(nil),                       // 5: nfs.proto.v1.PingResponse
	(*GetExportsRequest)(nil),                  // 6: nfs.proto.v1.GetExportsRequest
	(*GetExportsResponse)(nil),                 // 7: nfs.proto.v1.GetExportsResponse
	(*ExportMultipleNfsVolumesRequest)(nil),    // 8: nfs.proto.v1.ExportMultipleNfsVolumesRequest
	(*ExportMultipleNfsVolumesResponse)(nil),   // 9: nfs.proto.v1.ExportMultipleNfsVolumesResponse
	(*UnexportMultipleNfsVolumesRequest)(nil),  // 10: nfs.proto.v1.UnexportMultipleNfsVolumesRequest
	(*UnexportMultipleNfsVolumesResponse)(nil), // 11: nfs.proto.v1.UnexportMultipleNfsVolumesResponse
	nil, // 12: nfs.proto.v1.ExportNfsVolumeRequest.ExportNfsContextEntry
	nil, // 13: nfs.proto.v1.ExportNfsVolumeResponse.ExportNfsContextEntry
	nil, // 14: nfs.proto.v1.UnexportNfsVolumeRequest.UnexportNfsContextEntry
	nil, // 15: nfs.proto.v1.UnexportNfsVolumeResponse.UnexportNfsContextEntry
	nil, // 16: nfs.proto.v1.ExportMultipleNfsVolumesRequest.ExportNfsContextEntry
	nil, // 17: nfs.proto.v1.ExportMultipleNfsVolumesResponse.ExportNfsContextEntry
	nil, // 18: nfs.proto.v1.UnexportMultipleNfsVolumesRequest.ExportNfsContextEntry
	nil, // 19: nfs.proto.v1.UnexportMultipleNfsVolumesResponse.ExportNfsContextEntry
}
var file_nfs_proto_depIdxs = []int32{
	12, // 0: nfs.proto.v1.ExportNfsVolumeRequest.export_nfs_context:type_name -> nfs.proto.v1.ExportNfsVolumeRequest.ExportNfsContextEntry
	13, // 1: nfs.proto.v1.ExportNfsVolumeResponse.export_nfs_context:type_name -> nfs.proto.v1.ExportNfsVolumeResponse.ExportNfsContextEntry
	14, // 2: nfs.proto.v1.UnexportNfsVolumeRequest.unexport_nfs_context:type_name -> nfs.proto.v1.UnexportNfsVolumeRequest.UnexportNfsContextEntry
	15, // 3: nfs.proto.v1.UnexportNfsVolumeResponse.unexport_nfs_context:type_name -> nfs.proto.v1.UnexportNfsVolumeResponse.UnexportNfsContextEntry
	16, // 4: nfs.proto.v1.ExportMultipleNfsVolumesRequest.export_nfs_context:type_name -> nfs.proto.v1.ExportMultipleNfsVolumesRequest.ExportNfsContextEntry
	17, // 5: nfs.proto.v1.ExportMultipleNfsVolumesResponse.export_nfs_context:type_name -> nfs.proto.v1.ExportMultipleNfsVolumesResponse.ExportNfsContextEntry
	18, // 6: nfs.proto.v1.UnexportMultipleNfsVolumesRequest.export_nfs_context:type_name -> nfs.proto.v1.UnexportMultipleNfsVolumesRequest.ExportNfsContextEntry
	19, // 7: nfs.proto.v1.UnexportMultipleNfsVolumesResponse.export_nfs_context:type_name -> nfs.proto.v1.UnexportMultipleNfsVolumesResponse.ExportNfsContextEntry
	0,  // 8: nfs.proto.v1.Nfs.ExportNfsVolume:input_type -> nfs.proto.v1.ExportNfsVolumeRequest
	2,  // 9: nfs.proto.v1.Nfs.UnexportNfsVolume:input_type -> nfs.proto.v1.UnexportNfsVolumeRequest
	4,  // 10: nfs.proto.v1.Nfs.Ping:input_type -> nfs.proto.v1.PingRequest
	6,  // 11: nfs.proto.v1.Nfs.GetExports:input_type -> nfs.proto.v1.GetExportsRequest
	8,  // 12: nfs.proto.v1.Nfs.ExportMultipleNfsVolumes:input_type -> nfs.proto.v1.ExportMultipleNfsVolumesRequest
	10, // 13: nfs.proto.v1.Nfs.UnexportMultipleNfsVolumes:input_type -> nfs.proto.v1.UnexportMultipleNfsVolumesRequest
	1,  // 14: nfs.proto.v1.Nfs.ExportNfsVolume:output_type -> nfs.proto.v1.ExportNfsVolumeResponse
	3,  // 15: nfs.proto.v1.Nfs.UnexportNfsVolume:output_type -> nfs.proto.v1.UnexportNfsVolumeResponse
	5,  // 16: nfs.proto.v1.Nfs.Ping:output_type -> nfs.proto.v1.PingResponse
	7,  // 17: nfs.proto.v1.Nfs.GetExports:output_type -> nfs.proto.v1.GetExportsResponse
	9,  // 18: nfs.proto.v1.Nfs.ExportMultipleNfsVolumes:output_type -> nfs.proto.v1.ExportMultipleNfsVolumesResponse
	11, // 19: nfs.proto.v1.Nfs.UnexportMultipleNfsVolumes:output_type -> nfs.proto.v1.UnexportMultipleNfsVolumesResponse
	14, // [14:20] is the sub-list for method output_type
	8,  // [8:14] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_nfs_proto_init() }
func file_nfs_proto_init() {
	if File_nfs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nfs_proto_rawDesc), len(file_nfs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nfs_proto_goTypes,
		DependencyIndexes: file_nfs_proto_depIdxs,
		MessageInfos:      file_nfs_proto_msgTypes,
	}.Build()
	File_nfs_proto = out.File
	file_nfs_proto_goTypes = nil
	file_nfs_proto_depIdxs = nil
}
