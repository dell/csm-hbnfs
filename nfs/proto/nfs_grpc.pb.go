// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: nfs.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Nfs_ExportNfsVolume_FullMethodName            = "/nfs.proto.v1.Nfs/ExportNfsVolume"
	Nfs_UnexportNfsVolume_FullMethodName          = "/nfs.proto.v1.Nfs/UnexportNfsVolume"
	Nfs_Ping_FullMethodName                       = "/nfs.proto.v1.Nfs/Ping"
	Nfs_GetExports_FullMethodName                 = "/nfs.proto.v1.Nfs/GetExports"
	Nfs_ExportMultipleNfsVolumes_FullMethodName   = "/nfs.proto.v1.Nfs/ExportMultipleNfsVolumes"
	Nfs_UnexportMultipleNfsVolumes_FullMethodName = "/nfs.proto.v1.Nfs/UnexportMultipleNfsVolumes"
)

// NfsClient is the client API for Nfs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NfsClient interface {
	ExportNfsVolume(ctx context.Context, in *ExportNfsVolumeRequest, opts ...grpc.CallOption) (*ExportNfsVolumeResponse, error)
	UnexportNfsVolume(ctx context.Context, in *UnexportNfsVolumeRequest, opts ...grpc.CallOption) (*UnexportNfsVolumeResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	GetExports(ctx context.Context, in *GetExportsRequest, opts ...grpc.CallOption) (*GetExportsResponse, error)
	ExportMultipleNfsVolumes(ctx context.Context, in *ExportMultipleNfsVolumesRequest, opts ...grpc.CallOption) (*ExportMultipleNfsVolumesResponse, error)
	UnexportMultipleNfsVolumes(ctx context.Context, in *UnexportMultipleNfsVolumesRequest, opts ...grpc.CallOption) (*UnexportMultipleNfsVolumesResponse, error)
}

type nfsClient struct {
	cc grpc.ClientConnInterface
}

func NewNfsClient(cc grpc.ClientConnInterface) NfsClient {
	return &nfsClient{cc}
}

func (c *nfsClient) ExportNfsVolume(ctx context.Context, in *ExportNfsVolumeRequest, opts ...grpc.CallOption) (*ExportNfsVolumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportNfsVolumeResponse)
	err := c.cc.Invoke(ctx, Nfs_ExportNfsVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nfsClient) UnexportNfsVolume(ctx context.Context, in *UnexportNfsVolumeRequest, opts ...grpc.CallOption) (*UnexportNfsVolumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnexportNfsVolumeResponse)
	err := c.cc.Invoke(ctx, Nfs_UnexportNfsVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nfsClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Nfs_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nfsClient) GetExports(ctx context.Context, in *GetExportsRequest, opts ...grpc.CallOption) (*GetExportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExportsResponse)
	err := c.cc.Invoke(ctx, Nfs_GetExports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nfsClient) ExportMultipleNfsVolumes(ctx context.Context, in *ExportMultipleNfsVolumesRequest, opts ...grpc.CallOption) (*ExportMultipleNfsVolumesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportMultipleNfsVolumesResponse)
	err := c.cc.Invoke(ctx, Nfs_ExportMultipleNfsVolumes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nfsClient) UnexportMultipleNfsVolumes(ctx context.Context, in *UnexportMultipleNfsVolumesRequest, opts ...grpc.CallOption) (*UnexportMultipleNfsVolumesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnexportMultipleNfsVolumesResponse)
	err := c.cc.Invoke(ctx, Nfs_UnexportMultipleNfsVolumes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NfsServer is the server API for Nfs service.
// All implementations must embed UnimplementedNfsServer
// for forward compatibility.
type NfsServer interface {
	ExportNfsVolume(context.Context, *ExportNfsVolumeRequest) (*ExportNfsVolumeResponse, error)
	UnexportNfsVolume(context.Context, *UnexportNfsVolumeRequest) (*UnexportNfsVolumeResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	GetExports(context.Context, *GetExportsRequest) (*GetExportsResponse, error)
	ExportMultipleNfsVolumes(context.Context, *ExportMultipleNfsVolumesRequest) (*ExportMultipleNfsVolumesResponse, error)
	UnexportMultipleNfsVolumes(context.Context, *UnexportMultipleNfsVolumesRequest) (*UnexportMultipleNfsVolumesResponse, error)
	mustEmbedUnimplementedNfsServer()
}

// UnimplementedNfsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNfsServer struct{}

func (UnimplementedNfsServer) ExportNfsVolume(context.Context, *ExportNfsVolumeRequest) (*ExportNfsVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportNfsVolume not implemented")
}
func (UnimplementedNfsServer) UnexportNfsVolume(context.Context, *UnexportNfsVolumeRequest) (*UnexportNfsVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnexportNfsVolume not implemented")
}
func (UnimplementedNfsServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedNfsServer) GetExports(context.Context, *GetExportsRequest) (*GetExportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExports not implemented")
}
func (UnimplementedNfsServer) ExportMultipleNfsVolumes(context.Context, *ExportMultipleNfsVolumesRequest) (*ExportMultipleNfsVolumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportMultipleNfsVolumes not implemented")
}
func (UnimplementedNfsServer) UnexportMultipleNfsVolumes(context.Context, *UnexportMultipleNfsVolumesRequest) (*UnexportMultipleNfsVolumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnexportMultipleNfsVolumes not implemented")
}
func (UnimplementedNfsServer) mustEmbedUnimplementedNfsServer() {}
func (UnimplementedNfsServer) testEmbeddedByValue()             {}

// UnsafeNfsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NfsServer will
// result in compilation errors.
type UnsafeNfsServer interface {
	mustEmbedUnimplementedNfsServer()
}

func RegisterNfsServer(s grpc.ServiceRegistrar, srv NfsServer) {
	// If the following call pancis, it indicates UnimplementedNfsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Nfs_ServiceDesc, srv)
}

func _Nfs_ExportNfsVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportNfsVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NfsServer).ExportNfsVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nfs_ExportNfsVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NfsServer).ExportNfsVolume(ctx, req.(*ExportNfsVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nfs_UnexportNfsVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnexportNfsVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NfsServer).UnexportNfsVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nfs_UnexportNfsVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NfsServer).UnexportNfsVolume(ctx, req.(*UnexportNfsVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nfs_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NfsServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nfs_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NfsServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nfs_GetExports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NfsServer).GetExports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nfs_GetExports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NfsServer).GetExports(ctx, req.(*GetExportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nfs_ExportMultipleNfsVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportMultipleNfsVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NfsServer).ExportMultipleNfsVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nfs_ExportMultipleNfsVolumes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NfsServer).ExportMultipleNfsVolumes(ctx, req.(*ExportMultipleNfsVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nfs_UnexportMultipleNfsVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnexportMultipleNfsVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NfsServer).UnexportMultipleNfsVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nfs_UnexportMultipleNfsVolumes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NfsServer).UnexportMultipleNfsVolumes(ctx, req.(*UnexportMultipleNfsVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Nfs_ServiceDesc is the grpc.ServiceDesc for Nfs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nfs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nfs.proto.v1.Nfs",
	HandlerType: (*NfsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExportNfsVolume",
			Handler:    _Nfs_ExportNfsVolume_Handler,
		},
		{
			MethodName: "UnexportNfsVolume",
			Handler:    _Nfs_UnexportNfsVolume_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Nfs_Ping_Handler,
		},
		{
			MethodName: "GetExports",
			Handler:    _Nfs_GetExports_Handler,
		},
		{
			MethodName: "ExportMultipleNfsVolumes",
			Handler:    _Nfs_ExportMultipleNfsVolumes_Handler,
		},
		{
			MethodName: "UnexportMultipleNfsVolumes",
			Handler:    _Nfs_UnexportMultipleNfsVolumes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nfs.proto",
}
